{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","props","name","email","id","className","alt","src","CardList","robots","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","style","overflowY","border","height","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","App","onRequestRobots","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","ErrorBoundary","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","Boolean","window","location","hostname","match","intialStateSearch","intialStateRobots","Logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d0923041.chunk.js","sourcesContent":["import React from 'react';\r\nconst Card=(props)=> {\r\n    const {name ,email,id}=props;\r\n    return (<div className='bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n        <img alt=' Jane Doe' src={`https://robohash.org/${id}?200x200`}/>\r\n        <div>\r\n            <h2>\r\n            {name}\r\n            </h2>\r\n            <p>{email}</p>\r\n        </div>\r\n    </div>)\r\n}\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card'\r\nconst CardList =({robots})=>\r\n{\r\n    return (<div>\r\n        {robots.map((user,i)=>{\r\n            return(\r\n        <Card key={i} \r\n        id={robots[i].id} \r\n        name={robots[i].name} \r\n        email={robots[i].email}/>)\r\n\r\n})}</div>\r\n    \r\n    )\r\n}\r\nexport default CardList;","import React from 'react';\r\nconst SearchBox =({searchfield,searchChange})=>{\r\n    return (<div className='pa2'>\r\n        <input className='pa3 ba b--green bg-lightest-blue '\r\n         type='search' \r\n         placeholder='search robots' \r\n         onChange={searchChange}/>\r\n        </div>\r\n    );\r\n}\r\nexport default SearchBox;\r\n","import React from 'react';\r\nconst Scroll =(props)=> {\r\n    return ( <div style={{overflowY: 'scroll',border:'5px solid black', height:'500px'}}>\r\n        {props.children}\r\n    </div>\r\n    )\r\n};\r\nexport default Scroll;","import React ,{Component} from 'react';\r\nclass ErrorBoundry extends Component{\r\n    constructor (props){\r\n        super(props);\r\n        this.state={\r\n            hasError:false\r\n        }\r\n    }\r\n    componentDidCatch(error ,info)\r\n    {\r\nthis.setState({hasError:true})\r\n    }\r\n    render(){\r\n        if(this.state.hasError)\r\n        {\r\n            return <h1>Oooops .that is good</h1>\r\n        }\r\n        return this.props.children;\r\n    }\r\n\r\n}\r\nexport default ErrorBoundry;","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundary from '../components/ErrorBoundary';\r\nimport './App.css'\r\nimport {setSearchField,requestRobots} from '../actions';\r\n\r\nconst mapStateToProps=state=>{\r\n    return {\r\n        searchField: state.searchRobots.searchField,\r\n        robots:state.requestRobots.robots,\r\n        isPending:state.requestRobots.isPending,\r\n        error:state.requestRobots.error\r\n        \r\n    }\r\n}\r\nconst mapDispatchToProps =(dispatch)=>\r\n{\r\n   return{ onSearchChange:(event)=>dispatch(setSearchField(event.target.value)),\r\n    onRequestRobots:()=>dispatch(requestRobots())\r\n}}\r\n\r\nclass App extends Component{\r\n   componentWillMount(){\r\n        this.props.onRequestRobots();\r\n    }\r\n    render(){\r\n        const {searchField,onSearchChange,robots,isPending} =this.props;\r\n        const filteredRobots=robots.filter(robot=>{\r\n            return robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n        })\r\n        return isPending? <h1>Loading</h1>:\r\n    (<div className='tc'>\r\n        <h1 className=\"f1\">robofriends</h1>\r\n        <SearchBox  searchChange={onSearchChange}/>\r\n        <Scroll>\r\n        <ErrorBoundary>\r\n        \r\n        <CardList robots={filteredRobots}/>\r\n        </ErrorBoundary></Scroll>\r\n        </div>\r\n    )};\r\n\r\n}\r\nexport default connect(mapStateToProps,mapDispatchToProps)(App);","import {CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS ,\r\n    REQUEST_ROBOTS_FAILED\r\n} from './constants.js'\r\nexport const setSearchField=(text)=>({\r\n    type:CHANGE_SEARCH_FIELD,\r\n    payload:text\r\n})\r\nexport const requestRobots =()=>(dispatch) =>{\r\n    dispatch({type:REQUEST_ROBOTS_PENDING})\r\n    fetch( 'https://jsonplaceholder.typicode.com/users')\r\n    .then(response=> response.json())\r\n        .then(data =>dispatch({type:REQUEST_ROBOTS_SUCCESS,payload:data}))\r\n        .catch(error=>dispatch({type:REQUEST_ROBOTS_FAILED,payload:error}));\r\n\r\n\r\n}\r\n","export const CHANGE_SEARCH_FIELD='CHANGE_SEARCHF_IELD';\r\nexport const REQUEST_ROBOTS_PENDING ='REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS ='REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED ='REQUEST_ROBOTS_FAILD';","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS ,\r\n    REQUEST_ROBOTS_FAILED } from './constants.js';\r\nconst intialStateSearch ={\r\n    searchField:' '\r\n}\r\nexport const searchRobots =(state=intialStateSearch,action={})=>{\r\n   switch(action.type) {\r\n      case CHANGE_SEARCH_FIELD:\r\n          return Object.assign({},state,{searchField : action.payload})\r\n      default:\r\n          return state;\r\n  }\r\n}\r\nconst intialStateRobots ={\r\n    isPending:false,\r\n    robots:[],\r\n    error:''\r\n    \r\n\r\n\r\n}\r\nexport const requestRobots=(state=intialStateRobots,action={})=>\r\n{\r\n    switch(action.type){\r\n        case REQUEST_ROBOTS_PENDING:\r\n            return Object.assign({},state,{isPending:true})\r\n        case REQUEST_ROBOTS_SUCCESS:\r\n            return Object.assign({} ,state,{robots:action.payload,isPending:false})\r\n        case REQUEST_ROBOTS_FAILED:\r\n            return Object.assign({},state,{error:action.payload,isPending:false})\r\n       default:\r\n             return state;\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux';\nimport {createStore,applyMiddleware ,combineReducers} from 'redux';\nimport {createLogger} from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport App from './containers/App';\n\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport { searchRobots,requestRobots } from './reducers';\nconst Logger =createLogger();\nconst rootReducer= combineReducers({searchRobots,requestRobots})\nconst store = createStore(rootReducer,applyMiddleware(thunkMiddleware,Logger))\n\n\nReactDOM.render(\n<Provider store={store}>\n<App  />\n</Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}